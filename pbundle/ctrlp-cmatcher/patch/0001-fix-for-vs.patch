From c08f41c2f1b48c2e5f0844eb9683a99f1279399d Mon Sep 17 00:00:00 2001
From: hongy <hongy3025@163.com>
Date: Tue, 10 Oct 2017 14:40:39 +0800
Subject: [PATCH 1/3] fix for vs

---
 autoload/fuzzycomt.c | 20 +++++++++++++-------
 1 file changed, 13 insertions(+), 7 deletions(-)

diff --git a/autoload/fuzzycomt.c b/autoload/fuzzycomt.c
index ec48124..1e44391 100644
--- a/autoload/fuzzycomt.c
+++ b/autoload/fuzzycomt.c
@@ -22,6 +22,8 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 // POSSIBILITY OF SUCH DAMAGE.
 
+#define _CRT_SECURE_NO_WARNINGS
+
 #include "float.h"
 #include "fuzzycomt.h"
 
@@ -45,10 +47,11 @@ void ctrlp_get_line_matches(PyObject* paths,
 }
 
 char *strduplicate(const char *s) {
-    char *d = malloc (strlen (s) + 1);
+    int n = strlen(s);
+    char *d = malloc(n + 1);
     if (d == NULL)
        return NULL;
-    strcpy (d,s);
+    strncpy (d, s, n + 1);
     return d;
 }
 
@@ -241,7 +244,7 @@ PyObject* ctrlp_fuzzycomt_match(PyObject* self, PyObject* args) {
         return 0;
     }
 
-    matchobj_t matches[PyList_Size(paths)];
+    matchobj_t *matches = (matchobj_t*)_alloca(sizeof(matchobj_t) * PyList_Size(paths));
 
     if ( (limit > PyList_Size(paths)) || (limit == 0) ) {
         limit = PyList_Size(paths);
@@ -309,7 +312,7 @@ PyObject* ctrlp_fuzzycomt_sorted_match_list(PyObject* self, PyObject* args) {
         return 0;
     }
 
-    matchobj_t matches[PyList_Size(paths)];
+    matchobj_t *matches = (matchobj_t*)_alloca(sizeof(matchobj_t) * PyList_Size(paths));
 
     if ( (limit > PyList_Size(paths)) || (limit == 0) ) {
         limit = PyList_Size(paths);
@@ -364,7 +367,8 @@ matchobj_t ctrlp_find_match(PyObject* str, PyObject* abbrev, char *mmode)
     temp_string = strduplicate(PyString_AsString(str));
 
     // Replace all backslashes
-    for (i = 0; i < strlen(temp_string); i++) {
+    long n = (long)strlen(temp_string);
+    for (i = 0; i < n; i++) {
         if (temp_string[i] == '\\') {
             temp_string[i] = '/';
         }
@@ -402,8 +406,10 @@ matchobj_t ctrlp_find_match(PyObject* str, PyObject* abbrev, char *mmode)
     } else if (m.haystack_len > 0) { // normal case
 
         // prepare for memoization
-        double memo[m.haystack_len * m.needle_len];
-        for (i = 0, max = m.haystack_len * m.needle_len; i < max; i++)
+        int n = m.haystack_len * m.needle_len;
+        double *memo = (double*)_alloca(sizeof(double) * n);
+        max = n;
+        for (i = 0; i < max; i++)
             memo[i] = DBL_MAX;
         m.memo = memo;
 
-- 
2.14.1.windows.1

